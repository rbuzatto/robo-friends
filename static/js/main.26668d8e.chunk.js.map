{"version":3,"sources":["components/Card.js","components/CardList.js","components/Header.js","components/ErrorBoundry.js","containers/SearchBox.js","components/Scroll.js","containers/App.js","actions.js","constants.js","reducers.js","serviceWorker.js","index.js"],"names":["Card","_ref","name","email","username","react_default","a","createElement","className","src","concat","alt","CardList","robots","map","robot","components_Card","key","id","Header","nextProps","nextState","nextContext","Component","ErrorBoundry","state","hasError","this","props","children","error","SearchBox","input","onChange","e","persist","_this","setState","target","value","search","aria-label","type","placeholder","Scroll","style","overflowY","border","height","App","data","filterRobots","filter","toLowerCase","includes","_this2","fetch","then","res","status","json","catch","console","log","length","components_Header","containers_SearchBox","searchRobots","components_ErrorBoundry","components_CardList","connect","dispatch","payload","initialState","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","store","createStore","arguments","undefined","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","origin","addEventListener","response","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.26668d8e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card =({ name, email, username}) => (\r\n    <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n        <img src={`https://robohash.org/${username}?size=200x200`} alt=\"robots\"/>\r\n        <div>\r\n            <h2>{name}</h2>\r\n            <p>{email}</p>\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n    return (\r\n        <div>\r\n        {\r\n            robots.map(robot => <Card key={robot.id} name={robot.name} email={robot.email} username={robot.username} /> )\r\n        }\r\n    </div>\r\n    )\r\n};\r\n\r\nexport default CardList;","import React, { Component } from 'react';\r\n\r\nclass Header extends Component {\r\n    \r\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\r\n         return false;\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <h1 className=\"f1\">RoboFriends</h1>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n\r\n    state = {\r\n        hasError: false\r\n    }\r\n\r\n    static getDerivedStateFromError(error) {\r\n        return { hasError: true }\r\n    }\r\n\r\n    render() {\r\n        return this.state.hasError ? <h1>Something went wrong.</h1> : this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { Component } from 'react';\r\n\r\nclass SearchBox extends Component {\r\n\r\n  state = {\r\n    input: ''\r\n  };\r\n  \r\n  onChange = e => {\r\n    e.persist();\r\n    this.setState(() => ({\r\n      input: e.target.value\r\n    })\r\n    );\r\n    this.props.search(e);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"pa2\">\r\n        <input\r\n          aria-label=\"Search robot\"\r\n          className=\"pa3 ba b--green bg-lightest-blue\"\r\n          type=\"search\"\r\n          placeholder=\"search robots\"\r\n          value={this.state.input}\r\n          onChange={this.onChange} />\r\n      </div>\r\n    )\r\n  }\r\n};\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nexport default ({ children }) => (\r\n    <div style={{ overflowY: 'scroll', border: '1px solid black', height: '500px' }}>\r\n        {children}\r\n    </div>\r\n);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport CardList from '../components/CardList';\r\nimport Header from '../components/Header';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport SearchBox from './SearchBox';\r\nimport './App.css';\r\nimport { setSearchField } from \"../actions\";\r\n\r\nimport Scroll from '../components/Scroll';\r\n\r\n\r\nconst API = 'https://jsonplaceholder.typicode.com/users';\r\nclass App extends Component {\r\n    state = {\r\n        data: []\r\n    };\r\n\r\n    componentDidMount() {\r\n        fetch(API)\r\n            .then(res => {\r\n                if (res.status === 200) return res.json(); \r\n                throw res.status\r\n            })\r\n            .then(data => this.setState(() => ({ data })))\r\n            .catch(console.log)\r\n    }\r\n\r\n    filterRobots = (robots, filter) => {\r\n        return robots.filter(({ name }) => name.toLowerCase().includes(filter))\r\n    };\r\n    \r\n    render () {\r\n        const { data } = this.state;\r\n        const { filter } = this.props;\r\n\r\n        return data.length === 0 ? <h1 className=\"tc\">Loading...</h1> : (\r\n            <div className=\"tc\">\r\n                <Header />\r\n                <SearchBox search={this.props.searchRobots} />\r\n                <Scroll>\r\n                    <ErrorBoundry>\r\n                        <CardList robots={this.filterRobots(data, filter)} />\r\n                    </ErrorBoundry>\r\n                </Scroll>\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        filter: state.filter\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        searchRobots: e => dispatch(setSearchField(e.target.value))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { CHANGE_SEARCH_FIELD } from './constants';\r\n\r\nexport const setSearchField = text => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n});","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';","import { CHANGE_SEARCH_FIELD } from './constants';\r\n\r\nconst initialState = { \r\n    filter: ''\r\n };\r\n\r\n export const searchRobots = (state = initialState, {type, payload} = {}) => {\r\n    switch (type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return { filter: payload };\r\n        default:\r\n            return state;\r\n    }\r\n };","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux'; // provider passes the store props with the store value\r\nimport { createStore } from 'redux';\r\nimport 'tachyons';\r\n\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport { searchRobots } from './reducers';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst store = createStore(searchRobots, \r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\r\n\r\nReactDOM.render(\r\n    <Provider store={store} >\r\n        <App />\r\n    </Provider>    \r\n    , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}